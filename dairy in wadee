day 1 -------------------------------------------------------------------------------------------------------
//持久层（persistence）->解决对象和关系库不匹配问题
之所以要独立出一个“持久层”的概念,而不是“持久模块”，“持久单元”，也就意味着，我们的系统架构中，应该有一个相对独立的逻辑层面，
专著于数据持久化逻辑的实现.与系统其他部分相对而言，这个层面应该具有一个较为清晰和严格的逻辑边界。 --百度百科

//持久层框架
Hibernate 对象关系映射框架 它对JDBC进行了非常轻量级的对象封装，使得Java程序员可以随心所欲的使用对象编程思维来操纵数据库。
Hibernate可以应用在任何使用JDBC的场合，既可以在Java的客户端程序使用，
也可以在Servlet/JSP的Web应用中使用，最具革命意义的是，Hibernate可以在应用EJB的J2EE架构中取代CMP，完成数据持久化的重任。

MyBatis 使用MyBatis 提供的ORM机制，对业务逻辑实现人员而言，面对的是纯粹的Java对象， 这一层与通过Hibernate 实现ORM 而言
基本一致，而对于具体的数据操作，Hibernate 会自动生成SQL 语句，而MyBatis则要求开发者编写具体的SQL语句。相对Hibernate等
“全自动”ORM机制而言，MyBatis 以SQL开发的工作量和数据库移植性上的让步，为系统设计提供了更大的自由空间。作为“全自动”ORM 
实现的一种有益补充，MyBatis 的出现显得别具意义。 --百度百科
//DTO
数据传输对象（DTO)(Data Transfer Object)，是一种设计模式之间传输数据的软件应用系统。
// 
  static关键字的意义
	A．静态方法：
           在一个类中定义一个方法为static，那就是说，无需本类的对象即可调用此方法
	B. 静态变量：
           声明为static的变量实质上就是全局变量。当声明一个对象时，并不产生static变量的拷贝，而是该类所有的实例变量共用同一个static变量。
           需要通过计算来初始化static变量时，先声明一个static块，Static 块仅在该类被加载时执行一次。static定义的变量会优先于任何其它非static变量，在static{后面的一段代
           码用来进行显式的静态变量初始化，这段代码只会在类被第一次装载时初始化一次。在涉及到继承的时候，会先初始化父类的static变量，然后是子类的，依次类推。
	C. 静态类：
           通常一个普通类不允许声明为静态的，只有一个内部类才可以。这时这个声明为静态的内部类可以直接作为一个普通类来使用，而不需实例一个外部类。
  初始化块与静态初始化块的区别
        A. 初始化块在构造之前执行。
        B. 静态与类绑定，只执行一次。  
  this和super的区别
        A. super()函数在子类构造函数中调用父类的构造函数时使用。
        B. this()函数主要应用于同一类中从某个构造函数调用另一个重载版的构造函数。
  多维数组：初始化时只定义为几种元素，而每种元素各为一个数组。
 
-------------------------------------------------------------------------------------------------------------
day 2 -------------------------------------------------------------------------------------------------------
//单态（单例）模式，即Singleton模式主要作用是保证在面向对象编程语言设计编写的程序中，一个类Class只有一个实例存在。
特点 1、单例类只能有一个实例。
　　 2、单例类必须自己创建自己的唯一实例。
　　 3、单例类必须给所有其他对象提供这一实例。
   实现方式(只能生成一个类的对象):构造方法私有化
            class A {
                          private A()
                          public static A GetInstall(){
                                if(ins==null
                                ins=new())
                         return ins  }
                         private static A ins}
   
   使用Singleton的好处还在于可以节省内存，因为它限制了实例的个数，有利于Java垃圾回收（garbage collection）。
spring 默认Singleton 模式。 对象比较（system.out.printlin（obj1==obj2））
   //工具 在线画流程图 processon
     思维导图 xmind
   
   //Spring
   从简单性、可测试性和松耦合性的角度而言，绝大部分Java应用都可以从Spring中受益。
   Spring是一个轻量级的控制反转(IoC)和面向切面(AOP)的容器框架。
   <constructor-arg ref="spellChecker"></constructor-arg>
   spring 核心思想：依赖注入
   ->核心容器
这是Spring框架最基础的部分，它提供了依赖注入（DependencyInjection）特征来实现容器对Bean的管理。这里最基本的概念是BeanFactory，
它是任何Spring应用的核心。BeanFactory是工厂模式的一个实现，它使用IoC将应用配置和依赖说明从实际的应用代码中分离出来。
   ->应用上下文（Context）模块
核心模块的BeanFactory使Spring成为一个容器，而上下文模块使它成为一个框架。这个模块扩展了BeanFactory的概念，增加了对
国际化（I18N）消息、事件传播以及验证的支持。
  ->Spring的AOP模块
Spring在它的AOP模块中提供了对面向切面编程的丰富支持。这个模块是在Spring应用中实现切面编程的基础。
  ->JDBC抽象和DAO模块
使用JDBC经常导致大量的重复代码，取得连接、创建语句、处理结果集，然后关闭连接。Spring的JDBC和DAO模块抽取了这些重复代码，
因此你可以保持你的数据库访问代码干净简洁，并且可以防止因关闭数据库资源失败而引起的问题。
  ->对象/关系映射集成模块
对那些更喜欢使用对象/关系映射工具而不是直接使用JDBC的人，Spring提供了ORM模块。Spring并不试图实现它自己的ORM解决方案，
而是为几种流行的ORM框架提供了集成方案，包括Hibernate、JDO和iBATIS SQL映射。Spring的事务管理支持这些ORM框架中的每一个
也包括JDBC。
  ->Spring的Web模块
Web上下文模块建立于应用上下文模块之上，提供了一个适合于Web应用的上下文。另外，这个模块还提供了一些面向服务支持。
例如：实现文件上传的multipart请求，它也提供了Spring和其它Web框架的集成，比如Struts、WebWork。
  ->Spring的MVC框架
Spring为构建Web应用提供了一个功能全面的MVC框架。虽然Spring可以很容易地与其它MVC框架集成，例如Struts，但Spring的MVC框架
使用IoC对控制逻辑和业务对象提供了完全的分离。
它也允许你声明性地将请求参数绑定到你的业务对象中，此外，Spring的MVC框架还可以利用Spring的任何其它服务，例如国际化信息与
验证。

  // EL表达式
   ${expression}
   EL存取变量数据的方法很简单，例如：${username}。它的意思是取出某一范围中名称为username的变量。
因为我们并没有指定哪一个范围的username，所以它会依序从Page、Request、Session、Application范围查找。
假如途中找到username，就直接回传，不再继续找下去，但是假如全部的范围都没有找到时，就回传null。
  
-------------------------------------------------------------------------------------------------------------
day 3 -------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------
day 4 -------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------------------
day 5 -------------------------------------------------------------------------------------------------------
