day 1 -------------------------------------------------------------------------------------------------------
//持久层（persistence）->解决对象和关系库不匹配问题
之所以要独立出一个“持久层”的概念,而不是“持久模块”，“持久单元”，也就意味着，我们的系统架构中，应该有一个相对独立的逻辑层面，
专著于数据持久化逻辑的实现.与系统其他部分相对而言，这个层面应该具有一个较为清晰和严格的逻辑边界。 --百度百科

//持久层框架
Hibernate 对象关系映射框架 它对JDBC进行了非常轻量级的对象封装，使得Java程序员可以随心所欲的使用对象编程思维来操纵数据库。
Hibernate可以应用在任何使用JDBC的场合，既可以在Java的客户端程序使用，
也可以在Servlet/JSP的Web应用中使用，最具革命意义的是，Hibernate可以在应用EJB的J2EE架构中取代CMP，完成数据持久化的重任。

MyBatis 使用MyBatis 提供的ORM机制，对业务逻辑实现人员而言，面对的是纯粹的Java对象， 这一层与通过Hibernate 实现ORM 而言
基本一致，而对于具体的数据操作，Hibernate 会自动生成SQL 语句，而MyBatis则要求开发者编写具体的SQL语句。相对Hibernate等
“全自动”ORM机制而言，MyBatis 以SQL开发的工作量和数据库移植性上的让步，为系统设计提供了更大的自由空间。作为“全自动”ORM 
实现的一种有益补充，MyBatis 的出现显得别具意义。 --百度百科
//DTO
数据传输对象（DTO)(Data Transfer Object)，是一种设计模式之间传输数据的软件应用系统。
-------------------------------------------------------------------------------------------------------------
day 2 -------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------
day 3 -------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------
day 4 -------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------------------
day 5 -------------------------------------------------------------------------------------------------------
